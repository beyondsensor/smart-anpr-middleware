// Generated by Xata Codegen 0.28.4. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "HikCameraEvent",
    columns: [
      { name: "ipAddress", type: "string" },
      { name: "portNo", type: "int" },
      { name: "protocol", type: "string" },
      { name: "macAddress", type: "string" },
      { name: "timestamp", type: "datetime" },
      { name: "state", type: "text" },
      { name: "channelName", type: "string" },
      { name: "channelId", type: "int" },
      { name: "activePostCount", type: "int" },
    ],
    revLinks: [{ column: "relatedEvent", table: "AccessControlEvent" }],
  },
  { name: "AccessControlEventType", columns: [] },
  {
    name: "DisplayType",
    columns: [
      { name: "code", type: "text", notNull: true, defaultValue: "" },
      { name: "name", type: "text", notNull: true, defaultValue: "" },
      { name: "description", type: "text" },
      { name: "displayUrl", type: "text" },
    ],
    revLinks: [{ column: "type", table: "DisplayConfig" }],
  },
  {
    name: "DisplayConfig",
    columns: [
      { name: "name", type: "string", unique: true },
      { name: "status", type: "string" },
      { name: "description", type: "text" },
      { name: "type", type: "link", link: { table: "DisplayType" } },
      { name: "settings", type: "json", notNull: true, defaultValue: "{ }" },
    ],
  },
  {
    name: "AccessControlEvent",
    columns: [
      { name: "mask", type: "string", notNull: true, defaultValue: "no" },
      { name: "label", type: "text" },
      { name: "doorNo", type: "int" },
      {
        name: "helmet",
        type: "string",
        notNull: true,
        defaultValue: "unknown",
      },
      { name: "serialNo", type: "int" },
      { name: "deviceName", type: "string" },
      { name: "statusValue", type: "int" },
      { name: "currentEvent", type: "bool" },
      { name: "subEventType", type: "int" },
      { name: "cardReaderKind", type: "int" },
      { name: "majorEventType", type: "int", notNull: true, defaultValue: "0" },
      { name: "attendanceStatus", type: "string" },
      { name: "currentVerifyMode", type: "string" },
      { name: "purePwdVerifyEnable", type: "bool" },
      { name: "relatedEvent", type: "link", link: { table: "HikCameraEvent" } },
      { name: "frontSerialNo", type: "int", notNull: true, defaultValue: "0" },
      { name: "name", type: "text" },
      { name: "cardReaderNo", type: "int" },
      { name: "employeeNoString", type: "text" },
      { name: "picturesNumber", type: "int" },
      { name: "userType", type: "text" },
      { name: "verifyNo", type: "int" },
      { name: "faceRect", type: "json" },
      { name: "snapshot", type: "file" },
    ],
  },
  {
    name: "MetaDump_Testing",
    columns: [
      { name: "name", type: "text" },
      { name: "snapshot", type: "file" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type HikCameraEvent = InferredTypes["HikCameraEvent"];
export type HikCameraEventRecord = HikCameraEvent & XataRecord;

export type AccessControlEventType = InferredTypes["AccessControlEventType"];
export type AccessControlEventTypeRecord = AccessControlEventType & XataRecord;

export type DisplayType = InferredTypes["DisplayType"];
export type DisplayTypeRecord = DisplayType & XataRecord;

export type DisplayConfig = InferredTypes["DisplayConfig"];
export type DisplayConfigRecord = DisplayConfig & XataRecord;

export type AccessControlEvent = InferredTypes["AccessControlEvent"];
export type AccessControlEventRecord = AccessControlEvent & XataRecord;

export type MetaDumpTesting = InferredTypes["MetaDump_Testing"];
export type MetaDumpTestingRecord = MetaDumpTesting & XataRecord;

export type DatabaseSchema = {
  HikCameraEvent: HikCameraEventRecord;
  AccessControlEventType: AccessControlEventTypeRecord;
  DisplayType: DisplayTypeRecord;
  DisplayConfig: DisplayConfigRecord;
  AccessControlEvent: AccessControlEventRecord;
  MetaDump_Testing: MetaDumpTestingRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://BeyondSensor-Xata-Workspace-jpgu1o.ap-southeast-2.xata.sh/db/event-management-db",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
